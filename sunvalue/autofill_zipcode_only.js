(function() {
  "use strict";
  const s = (o, t, n, e = "") => {
    window.dataLayer = window.dataLayer || [], window.dataLayer.push({
      event: "event-to-ga4",
      event_name: o,
      event_desc: t,
      event_type: n,
      event_loc: e
    }), console.log(`Event: ${o} | ${t} | ${n} | ${e}`);
  }, l = ({ name: o, dev: t }) => {
    console.log(
      `%c EXP: ${o} (DEV: ${t})`,
      "background: #3498eb; color: #fccf3a; font-size: 20px; font-weight: bold;"
    );
  }, p = (o) => {
    let t = setInterval(function() {
      typeof window.clarity == "function" && (clearInterval(t), window.clarity("set", o, "variant_1"));
    }, 1e3);
  }, u = "https://api.sunvalue.com/api/geo", d = "https://api.sunvalue.com/api/address?zip=";
  async function r(o, t = "GET", n = null) {
    try {
      const e = {
        method: t,
        headers: {
          "Content-Type": "application/json"
        }
      };
      n && (e.body = JSON.stringify(n));
      const i = await fetch(o, e);
      if (!i.ok)
        throw new Error(`HTTP error! status: ${i.status}`);
      return await i.json();
    } catch (e) {
      throw console.error("Fetch error:", e), e;
    }
  }
  const w = async () => await r(u), h = async (o) => await r(d + o), c = (
    /* HTML */
    `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none">
  <path
    d="M10 0C6.006 0 2.757 3.25 2.757 7.243c0 4.957 6.482 12.233 6.758 12.54.259.29.712.289.97 0 .276-.307 6.758-7.583 6.758-12.54C17.243 3.25 13.994 0 10 0Zm0 10.887a3.648 3.648 0 0 1-3.644-3.644A3.648 3.648 0 0 1 10 3.6a3.648 3.648 0 0 1 3.644 3.644A3.648 3.648 0 0 1 10 10.887Z"
    fill="currentColor"
  />
</svg>`
  ), f = (
    /* HTML */
    `<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 100 100"
  preserveAspectRatio="xMidYMid"
  width="40"
  height="40"
  style="shape-rendering: auto; display: block; background: transparent;"
  xmlns:xlink="http://www.w3.org/1999/xlink"
>
  <g>
    <circle
      stroke-dasharray="164.93361431346415 56.97787143782138"
      r="35"
      stroke-width="3"
      stroke="currentColor"
      fill="none"
      cy="50"
      cx="50"
    >
      <animateTransform
        keyTimes="0;1"
        values="0 50 50;360 50 50"
        dur="0.5319148936170213s"
        repeatCount="indefinite"
        type="rotate"
        attributeName="transform"
      ></animateTransform>
    </circle>
    <g></g>
  </g>
  <!-- [ldio] generated by https://loading.io -->
</svg>`
  ), g = `li:has(> #zip) {
  position: relative;
}

.os-current-location {
  position: absolute;
  top: 50%;
  right: 10px;
  z-index: 2;
  transform: translateY(-50%) translateY(-3px);
  display: flex;
  align-items: center;
  max-width: 50%;
}

.os-current-location__city {
  overflow: hidden;
  text-overflow: ellipsis;
  text-wrap: nowrap;
}

#zip-error:not(:empty) + .os-current-location {
  transform: translateY(-50%) translateY(-10px);
}
`;
  class y {
    constructor() {
      this.init();
    }
    init() {
      this.autofillZip(), this.zipCodeHandler(), this.initStyles();
    }
    async autofillZip() {
      var i;
      const t = await w();
      t.postal ? s("exp_zipcode_is_autofilled", t.postal, "input", "Step zipcode") : s("exp_zipcode_is_not_autofilled", "No zipcode", "input", "Step zipcode");
      const n = document.querySelector("#zip");
      n && t.postal && (n.value = t.postal);
      const e = (
        /* HTML */
        `
      <div class="os-current-location">
        ${t.regionName ? `<span class="os-current-location__icon">${c}</span>
      <span class="os-current-location__city">${t.regionName}</span>` : ""}
      </div>
    `
      );
      (i = n == null ? void 0 : n.closest("li")) == null || i.insertAdjacentHTML("beforeend", e);
    }
    zipCodeHandler() {
      const t = document.querySelector("#zip");
      if (!t)
        return;
      let n;
      t.addEventListener("input", async () => {
        const e = t.value;
        clearTimeout(n), n = setTimeout(async () => {
          const i = document.querySelector(".os-current-location");
          if (!i)
            return;
          e.length < 5 && (i.innerHTML = ""), i.innerHTML = /* HTML */
          `<span class="os-current-location__spinner">${f}</span>`;
          const { state_name: a } = await h(Number(e));
          sessionStorage.setItem("chosen_state", a), document.querySelector("#os-save-up"), a ? i.innerHTML = /* HTML */
          `<span class="os-current-location__icon">${c}</span>
            <span class="os-current-location__city">${a}</span>` : i.innerHTML = "";
        }, 500);
      }), t.addEventListener("change", () => {
        s("exp_zipcode_input", "Input", "input", "Step zipcode");
      });
    }
    initStyles() {
      const t = document.createElement("style");
      t.innerHTML = g, document.head.appendChild(t);
    }
  }
  l({ name: "ZIP code autofill", dev: "OS" }), p("exp_zipcode");
  class m {
    constructor() {
      console.log("LaunchExperiment"), this.init();
    }
    init() {
      new y();
    }
  }
  new m();
})();
//# sourceMappingURL=index.js.map
